 @model Learning.Models.UserProfile

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link rel="stylesheet" href="./css/styles.css">
    <link 
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" 
        rel="stylesheet">
        
    

</head>
<body>
     
  
 
    <div class="container">
        @* <header>
            <h1> @Model?.Name</h1> <!-- Fallback to "User" if Name is null -->
        </header> *@

        <!-- Progress Display -->
        @* <section class="progress-section">
            <h2 class="name">Your Course Progress</h2>
            @if (Model?.CourseProgress != null)
            {
                @foreach (var course in Model.CourseProgress)
                {
                    <div class="course">
                        <span>@course.Key</span>
                        <div class="progress-bar-container">
                            <div class="progress-bar" style="width: @course.Value%;"></div>
                        </div>
                        <span>@course.Value%</span>
                    </div>
                }
            }
            else
            {
                <p>No course progress available.</p>
            }
        </section> *@
        <section class="progress-section my-4">
    <h2 class="text-center name ">Your Course Progress</h2>
    @if (Model?.CourseProgress != null)
    {
        @foreach (var course in Model.CourseProgress)
        {
            <div class="course mb-4">
                <div class="d-flex justify-content-between mb-1">
                    <span class="course-name">@course.Key</span>
                    <span class="progress-percent" id="percent-@course.Key">@course.Value%</span>
                </div>
                <div class="progress" style="height: 20px;">
                    <div class="progress-bar" 
                         role="progressbar" 
                         data-progress="@course.Value" 
                         style="width: 0%;" 
                         aria-valuenow="@course.Value" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                         @course.Value%
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-muted text-center">No course progress available.</p>
    }
</section>


        <!-- Achievements Section -->
        @* <section class="achievements-section">
            <h2 class=" text-center name">Your Achievements</h2>
            <div class="achievements">
                @if (Model?.Achievements != null && Model.Achievements.Any())
                {
                    @foreach (var achievement in Model.Achievements)
                    {
                        <div class="container my-2">
    <div class="row justify-content-center g-4">
        
        <div class="col-md">
            <div class="card text-center">
                <img src="images/achievements/badge1.png" class="card-img-top" >
                <div class="card-body">
                    <div class="achievement-overlay">
                    <h5 class="card-title">Top Learner</h5>
                    <p class="card-text">Earned for completing 10 courses with excellence.</p>
                </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center">
                <img src="images/achievements/badge2.webp" class="card-img-top" alt="Achievement 2">
                <div class="card-body">
                    <h5 class="card-title">Quiz Master</h5>
                    <p class="card-text">Awarded for scoring 100% on 5 quizzes.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center">
                <img src="images/achievements/certificate.png" class="card-img-top" alt="Achievement 3">
                <div class="card-body">
                    <h5 class="card-title">Certificate of Excellence</h5>
                    <p class="card-text">Recognized for outstanding course participation.</p>
                </div>
            </div>
        </div>
    </div>
</div>

                    }
                }
                else
                {
                    <p>No achievements yet!</p>
                }
            </div>
        </section>
       *@
       <section class="achievements-section animate-section" data-animation="slide-up">
            <h2 class=" text-center name">Your Achievements</h2><br>
            
    <div class="container my-2" style="padding-left:51px;" >
    <div class="row justify-content-center g-4">
        
      <div class="col-md">
        <div class="card text-center">
          <img src="images/achievements/certi1.png" class="card-img-top" alt="Top Learner Badge">
          <div class="card-body">
            
            <div class="achievement-overlay ">
              <h5 class="card-title achievement-details">Top Learner</h5>
              <p class="card-text">Earned for completing  with excellence.actively seek knowledge and ask thoughtful questions to deepen  understanding take initiative, setting personal goals and pursuing diligently without external pressure.</p>
              
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-4">
        <div class="card text-center" style="height:100%">
          <img src="images/achievements/badge4.png" class="card-img-top" alt="Quiz Master Badge">
          <div class="card-body">
            <div class="achievement-overlay ">
            <h5 class="card-title achievement-details">Quiz Master</h5>
            <p class="card-text">Awarded for scoring 100% on 5 quizzes.skilled and engaging individual responsible for creating, organizing, and hosting quizzesManages the quiz structure, timing, and scoring system efficiently, ensuring a seamless event.</p>
          </div>
          </div>
        </div>
      </div>

      <div class="col-md-4">
<div class="card text-center" style="height:100%">
          <img src="images/achievements/certificate.png" class="card-img-top" alt="Certificate of Excellence">
          <div class="card-body">
            <div class="achievement-overlay ">
            <h5 class="card-title achievement-details">Certificate of Excellence</h5>
            <p class="card-text">Awarded  in recognition of  remarkable achievements and exceptional contributions.hard work, determination, and passion have set a high standard of excellence.</p>
          </div>
          </div>
        </div>
      </div>
      
    </div>
  </div>

                     
        </section>


        <!-- Leaderboard Section -->
        @* <section class="leaderboard-section">
            <h2 class=" text-center name">Leaderboard</h2>
            @if (Model?.TotalUsers > 0)
            {
                <ul>
                    @for (int i = 1; i <= Model.TotalUsers; i++)
                    {
                        var isUser = i == Model.Rank;
                        <li class="@(isUser ? "highlight" : "")">
                            Rank @i @if (isUser) { <strong>(You)</strong> }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No users available for comparison.</p>
            }
        </section> *@
        <section class="leaderboard-container animate-section" data-animation="zoom-in">
        <h2 class="text-center name">Leaderboard</h2>
@if (Model?.TotalUsers > 0)
{
    <div class="leaderboard-container">
        <ul class="list-group list-group-flush">
    @for (int i = 1; i <= Model.TotalUsers; i++)
    {
        var isUser = i == Model.Rank;
        <li class="list-group-item d-flex justify-content-between align-items-center @(isUser ? "highlight" : "")">
            <span>Rank @i</span>
            @if (isUser) 
            { 
                <strong >DEVIKA M</strong>
            }
            @if (isUser)
            {
                <span class="rank-info">Your score: @Model.UserScore </span>
            }
        </li>
    }
</ul>

    </div>
}
else
{
    <p class="text-center">No users available for comparison.</p>
}
</section>


        <!-- Reward Tracker -->
        <section class="reward-tracker my-4">
    <h2 class="text-center re">Next Reward In:</h2>
    <div id="countdown-timer">Loading...</div>
</section>

        <!-- Theme Customization -->
        <div>
            <div class="theme-buttons">
    <button id="light-theme-btn" class="theme-btn">Light Theme</button>
    <button id="dark-theme-btn" class="theme-btn">Dark Theme</button>
    <button id="colorful-theme-btn" class="theme-btn">Colorful Theme</button>
</div>

        </div>
        
    </div>
     
    
<script 
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
    </script>
    <script src="/Scripts/scripts.js"></script>
    <script>
        function initializeCountdown(timeInSeconds) {
            // Set the time remaining in seconds
            let timeRemaining = timeInSeconds;

            // Get the countdown display element
            const countdownElement = document.getElementById("countdown-timer");

            // Function to update the countdown display
            function updateCountdown() {
                // Calculate hours, minutes, and seconds
                const hours = Math.floor(timeRemaining / 3600);
                const minutes = Math.floor((timeRemaining % 3600) / 60);
                const seconds = timeRemaining % 60;

                // Format the time
                const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                // Update the display
                countdownElement.textContent = formattedTime;

                // Decrease the time remaining by 1 second
                if (timeRemaining > 0) {
                    timeRemaining--;
                } else {
                    // Time is up, you can trigger reward or show a message
                    countdownElement.textContent = "Reward unlocked!";
                }
            }

            // Update every second
            setInterval(updateCountdown, 1000);

            // Initial call to display time immediately
            updateCountdown();
        }
  document.addEventListener("DOMContentLoaded", () => {
            const timeToNextReward = @Model?.TimeToNextReward;  // Pass the time from backend to JS
            initializeCountdown(timeToNextReward);
        });
         
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
    const progressBars = document.querySelectorAll('.progress-bar');

    progressBars.forEach(function (bar) {
        const progressValue = parseInt(bar.getAttribute('data-progress'));
        const width = progressValue; // Directly use the progress percentage

        // Animate the progress bar to fill smoothly
        bar.style.transition = 'width 1s ease-in-out'; // Ensure smooth transition
        bar.style.width = width + '%'; // Set the width to the progress percentage
        bar.textContent = width + '%'; // Optionally show the percentage inside the bar
    });
});

    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
    // Buttons
    const lightThemeBtn = document.getElementById("light-theme-btn");
    const darkThemeBtn = document.getElementById("dark-theme-btn");
    const colorfulThemeBtn = document.getElementById("colorful-theme-btn");

    // Function to apply a theme
    function switchTheme(theme) {
        document.documentElement.setAttribute("data-theme", theme); // Set the theme
        localStorage.setItem("selectedTheme", theme); // Save theme to localStorage
    }

    // Event listeners
    lightThemeBtn.addEventListener("click", () => switchTheme("light"));
    darkThemeBtn.addEventListener("click", () => switchTheme("dark"));
    colorfulThemeBtn.addEventListener("click", () => switchTheme("colorful"));

    // Apply saved theme on page load
    const savedTheme = localStorage.getItem("selectedTheme") || "light";
    document.documentElement.setAttribute("data-theme", savedTheme);
});

    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
    const sections = document.querySelectorAll(".animate-section");

    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("visible");
                    observer.unobserve(entry.target); // Stop observing once it's visible
                }
            });
        },
        {
            threshold: 0.2, // Trigger when 20% of the section is visible
        }
    );

    sections.forEach((section) => observer.observe(section));
});
const observer = new IntersectionObserver(
    (entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                entry.target.classList.add("visible");
            } else {
                entry.target.classList.remove("visible");
            }
        });
    },
    { threshold: 0.2 }
);


    </script>
</body>
</html>
